<launch>

  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find dd_sim)/model/dd_sim.xacro"/>

  <node pkg="rviz" type="rviz" name="rviz" required="true" args="-d $(find dd_sim)/rviz/dd_move_base.rviz"/>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"></node>

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="False"/>
  </node>

  <!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames -->
  <node pkg="tf" type="static_transform_publisher" name="world_to_map" args="0 0 0 0 0 0 world map 50"/>
  <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.055 0 0 0 footprint base_link 50" />

  <!-- Launch RViz -->
  <!-- <include file="$(find dd_sim)/launch/display.launch"> -->
     <!-- <arg name="model" value="$(find dd_sim)/model/dd_sim.xacro"/>
     <arg name="rvizconfig" value="$(find dd_sim)/rviz/mobile_manipulator.rviz"/> -->
  <!-- </include> -->
  
  <!-- Extended Kalman Filter from robot_pose_ekf Node-->
  <!-- Subscribe: /odom, /imu_data, /vo -->
  <!-- Publish: /robot_pose_ekf/odom_combined -->
  <remap from="odom" to="/dd/base_controller/odom" />
  <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="output_frame" value="odom"/>
    <param name="base_footprint_frame" value="footprint"/>
    <param name="freq" value="50.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="false"/>
    <param name="vo_used" value="false"/>
    <param name="gps_used" value="false"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
  </node>

  <!-- Map File -->
  <arg name="map_file" default="$(find dd_sim)/map/dd_map_1.yaml"/>
	
  <!-- Map Server -->
  <!-- Publish: /map, /map_metadata -->
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />
	
  <!-- Add AMCL example for differential drive robots for Localization -->
  <!-- Subscribe: /scan, /tf, /initialpose, /map -->
  <!-- Publish: /amcl_pose, /particlecloud, /tf -->
  <include file="$(find dd_sim)/launch/dd_amcl.launch"/>  
	
  <!-- Move Base Node -->
  <!-- Subscribe: /tf, /map, /scan, /odom, /move_base_simple/goal -->
  <!-- Publish: /cmd_vel -->
  <remap from="cmd_vel" to="/dd/base_controller/cmd_vel"/>
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find dd_sim)/param/dd_costmap_common_params_2.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find dd_sim)/param/dd_costmap_common_params_2.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find dd_sim)/param/dd_local_costmap_params_2.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find dd_sim)/param/dd_global_costmap_params_2.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find dd_sim)/param/dd_base_local_planner_params_2.yaml" command="load" />
  </node>

</launch>
